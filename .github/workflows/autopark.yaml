name: TESTING_PIPELINE

on:
  workflow_dispatch:
    inputs:

      REGION: 
        description: Region name 
        type: string
        required: true

      ACCESS_KEY_ID:
        description: Acces key ID
        type: string
        required: true
      
      SECRET_ACCESS_KEY_ID:
        description: Secret Acces key ID
        type: string
        required: true
env:

  REGION: ${{inputs.REGION}}
  AWS_ACCESS_KEY_INPUT: ${{inputs.ACCESS_KEY_ID}}
  AWS_SECRET_ACCESS_KEY_INPUT: ${{inputs.SECRET_ACCESS_KEY_ID}}

  BUCKET_TF_STATE_DEV: ronak-test-bucket
  STATE_FILE_TF_VAR_DEV: ronak-test.tfstate
  STATELOCK_TABLE_TF_DEV: ronak-test

jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.1.0

      - name: Configure AWS Credentials personal account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_INPUT }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY_INPUT }}
          aws-region: ap-south-1

      # - name: Setup Remote state DEV
      #   run: |
      #       aws --version
      #       chmod +x s3-remote-state.sh
      #       ./s3-remote-state.sh ${{env.BUCKET_TF_STATE_DEV}} ${{env.STATELOCK_TABLE_TF_DEV}} ${{env.REGION}}
            
      - name: Git config
        run: git config --global url."https://oauth2:${{secrets.TOKEN_PAT}}@github.com".insteadOf https://github.com
            
            
      - name: Initialize Terraform
        run: terraform init
      # run: terraform init -reconfigure -backend-config="bucket=${{env.BUCKET_TF_STATE_DEV}}" -backend-config="key=${{ env.STATE_FILE_TF_VAR_DEV }}" -backend-config="dynamodb_table=${{env.STATELOCK_TABLE_TF_DEV}}" -backend-config="encrypt=true"
            
      - name: Plan Terraform
        id: plan
        run: |
          terraform plan -var-file="./dev.tfvars" \
          -var="region=${{env.REGION}}"
        

      - name: Capture Terraform Plan status
        if: failure()  # This step runs only if the previous step fails
        id: capture-plan-error
        run: |
          echo "error_message=Terraform Plan failed" >> $GITHUB_ENV
          echo "::set-output name=error_message::Terraform Plan failed"

  Send-Response-To-SNOW:
    runs-on: ubuntu-latest
    needs: [terraform]
    if: always()
    steps:
      - name: Send response to SNOW
        run: |
          if [ -z "${{ needs.terraform.outputs.error_message }}" ]; then
            echo "No errors, job succeeded" > response-status.txt
          else
            echo "${{ needs.terraform.outputs.error_message }}" > response-status.txt
          fi
          cat response-status.txt



      # - name: APPLY Terraform
      #   run: | 
      #     terraform apply -auto-approve -var-file="./dev.tfvars" \
      #     -var="region=${{env.REGION}}"
          
      # - name: Download tfstate file from Account 1
      #   run: aws s3 cp s3://${{env.BUCKET_TF_STATE_DEV}}/${{env.STATE_FILE_TF_VAR_DEV}} .
