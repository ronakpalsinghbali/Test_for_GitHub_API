name: GitHub_SubnetIDs_parsing

on:
  workflow_dispatch:
    inputs:
      REGION:
        description: REGION
        type: string
        required: true

      VPC_CIDR_BLOCK:
        description: VPC_CIDR_BLOCK
        type: string
        required: true

      PUBLIC_SUBNET_CIDRS:
        description: PUBLIC_SUBNET_CIDRS
        type: string
        required: true

      PRIVATE_SUBNET_CIDRS:
        description: PRIVATE_SUBNET_CIDRS
        type: string
        required: true

      AVAILABILITY_ZONES:
        description: AVAILABILITY_ZONES
        type: string
        required: true

      ACCESS_KEY_ID:
        description: Acces key ID
        type: string
        required: true
      
      SECRET_ACCESS_KEY_ID:
        description: Secret Acces key ID
        type: string
        required: true
env:
  REGION: ${{ inputs.REGION }}
  VPC_CIDR_BLOCK: ${{ inputs.VPC_CIDR_BLOCK }}
  PUBLIC_SUBNET_CIDRS: ${{inputs.PUBLIC_SUBNET_CIDRS}}
  PRIVATE_SUBNET_CIDRS: ${{inputs.PRIVATE_SUBNET_CIDRS}}
  AVAILABILITY_ZONES: ${{inputs.AVAILABILITY_ZONES}}

  AWS_ACCESS_KEY_INPUT: ${{inputs.ACCESS_KEY_ID}}
  AWS_SECRET_ACCESS_KEY_INPUT: ${{inputs.SECRET_ACCESS_KEY_ID}}

jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Parse values
        id: parse_values
        run: |
          echo "VPC_CIDR_BLOCK=[\\\"$(echo ${{ env.VPC_CIDR_BLOCK }} | sed 's/,/\\",\\"/g')\\\"]" >> $GITHUB_OUTPUT
          echo "PUBLIC_SUBNET_CIDRS=[\\\"$(echo ${{ env.PUBLIC_SUBNET_CIDRS }} | sed 's/,/\\",\\"/g')\\\"]" >> $GITHUB_OUTPUT
          echo "PRIVATE_SUBNET_CIDRS=[\\\"$(echo ${{ env.PRIVATE_SUBNET_CIDRS }} | sed 's/,/\\",\\"/g')\\\"]" >> $GITHUB_OUTPUT
          echo "AVAILABILITY_ZONES=[\\\"$(echo ${{ env.AVAILABILITY_ZONES }} | sed 's/,/\\",\\"/g')\\\"]" >> $GITHUB_OUTPUT

      - name: Printing the parsed values
        id: parsed-printing
        run: |
          echo VPC_CIDR_BLOCK=${{ steps.parse_values.outputs.VPC_CIDR_BLOCK }}
          echo PUBLIC_SUBNET_CIDRS=${{ steps.parse_values.outputs.PUBLIC_SUBNET_CIDRS }}
          echo PRIVATE_SUBNET_CIDRS=${{ steps.parse_values.outputs.PRIVATE_SUBNET_CIDRS }}
          echo AVAILABILITY_ZONES=${{ steps.parse_values.outputs.AVAILABILITY_ZONES }}

      - name: Configure AWS Credentials for DEV ENV
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_INPUT }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY_INPUT }}
          aws-region: ${{env.REGION}}

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.1.0

      # - name: Run Checkov action
      #   id: checkov
      #   uses: bridgecrewio/checkov-action@master
      #   with:
      #     directory: .
      #     framework: terraform
      #     download_external_modules: true
      #     output_format: sarif
      #     output_file_path: console,checkov_report/results.sarif
      #     github_pat: ${{ secrets.TOKEN_PAT }}
        
      - name: Initialize Terraform
        run: terraform init

      - name: Plan Terraform
        run: | 
          terraform plan -var-file="dev.tfvars" \
          -var="region=${{env.REGION}}" \
          -var="cidr_block=${{steps.parse_values.outputs.VPC_CIDR_BLOCK}}" \
          -var="public_subnet_cidrs=${{steps.parse_values.outputs.PUBLIC_SUBNET_CIDRS}}" \
          -var="private_subnet_cidrs=${{steps.parse_values.outputs.PRIVATE_SUBNET_CIDRS}}" \
          -var="availability_zones=${{steps.parse_values.outputs.AVAILABILITY_ZONES}}" 
          










  Extracting:
    needs: terraform
    runs-on: ubuntu-latest
    steps:

      - name: Extract REST API URL
        id: extract-from-output 
        run: |
          rest_api_url=$(jq -r '.["rest-api-invoke-url"]' out2.json)
          echo "REST_API_URL=$rest_api_url" >> $GITHUB_OUTPUT

      - name: print URL
        run: echo $REST_API_URL

      - name: Microsoft Teams Webhook Message Bot
        uses: myusufcse/microsoft-teams-message-bot@main
        with:
          webhook: ${{ secrets.MS_WEBHOOK_URL }}
          message: |
                  The infra has been deployed
                  REST_API_URL - ${{steps.extract-from-output.outputs.REST_API_URL}}