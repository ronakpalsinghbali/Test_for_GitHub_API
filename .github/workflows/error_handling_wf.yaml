name: Error_handling_wf

on:
  workflow_dispatch:
    inputs:
      REGION: 
        description: Region name 
        type: string
        required: true

      ACCESS_KEY_ID:
        description: Access key ID
        type: string
        required: true
      
      SECRET_ACCESS_KEY_ID:
        description: Secret Access key ID
        type: string
        required: true

env:
  REGION: ${{inputs.REGION}}
  AWS_ACCESS_KEY_INPUT: ${{inputs.ACCESS_KEY_ID}}
  AWS_SECRET_ACCESS_KEY_INPUT: ${{inputs.SECRET_ACCESS_KEY_ID}}
  STEP_STATUS: ""

jobs:
  Infra-deploy-test:
    runs-on: arc-runner-set
    steps:
      - name: Checkout code
        id: checkout
        uses: actions/checkout@v4
        

      - name: Install Terraform
        id: install_terraform
        run: |
          apt-get update && \
          apt-get install -y curl gnupg && \
          apt-get clean \
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add - && \
          apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main" && \
          apt-get update && \
          apt-get install -y terraform=1.1.0

        

      - name: Configure AWS Credentials personal account
        id: configure_aws
        run: |
          aws configure set aws_access_key_id ${{ env.AWS_ACCESS_KEY_INPUT }}
          aws configure set aws_secret_access_key ${{ env.AWS_SECRET_ACCESS_KEY_INPUT }}
          aws configure set region ap-south-1
          aws sts get-caller-identity 2>error.log || (cat error.log && exit 1)
        
      - name: Print error for AWS Configure step
        if: ${{ failure() && steps.configure_aws.outcome == 'failure' }}
        id: aws_print_error
        run: |
          python3 ./error_read.py > aws_error.txt
          cat aws_error.txt
            
      - name: Git config
        id: git_config
        run: git config --global url."https://oauth2:${{secrets.TOKEN_PAT}}@github.com".insteadOf https://github.com
        
            
      - name: Initialize Terraform
        id: init_terraform
        run: terraform init
        
      
      - name: Plan Terraform
        id: plan_terraform
        run: |
          terraform plan -var-file="./dev.tfvars" \
          -var="region=${{env.REGION}}" 2>error.log

        
      - name:  Print error for Terraform Plan step
        if: ${{ failure() && steps.plan_terraform.outcome == 'failure' }}
        id: plan_print_error
        run: |
          python3 ./error_read.py > plan_error.txt
          cat plan_error.txt

      - name: Check for failures
        if: failure()
        id: check_failures
        run: |
          FAILED_STEPS=""
          if [ "${{steps.checkout.outcome}}" == "failure" ]; then
            FAILED_STEPS="Checkout code"
          fi
          if [ "${{steps.install_terraform.outcome}}" == "failure" ]; then
            FAILED_STEPS="Install Terraform"
          fi
          if [ "${{steps.configure_aws.outcome}}" == "failure" ]; then
            FAILED_STEPS="Configure AWS Credentials personal account"
          fi
          if [ "${{steps.git_config.outcome}}" == "failure" ]; then
            FAILED_STEPS="Git config"
          fi
          if [ "${{steps.init_terraform.outcome}}" == "failure" ]; then
            FAILED_STEPS="Initialize Terraform"
          fi
          if [ "${{steps.plan_terraform.outcome}}" == "failure" ]; then
            FAILED_STEPS="Plan Terraform"
          fi
          echo "STEP_STATUS= $FAILED_STEPS"
          echo "STEP_STATUS=$FAILED_STEPS" >> $GITHUB_ENV

      - name: Send failure notification
        if: failure()
        run: |
          echo "JOB failed: $STEP_STATUS"


      - name: Send success notification
        if: success()
        run: |
          echo "JOB succeeded"